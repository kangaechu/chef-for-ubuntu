#!/bin/bash

# GITLAB
# Maintainer: @randx
# App Version: 3.0.3
# Init script edited by: @maxlazio

### BEGIN INIT INFO
# Provides:          gitlab
# Required-Start:    $local_fs $remote_fs $network $syslog redis-server
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GitLab git repository management
# Description:       GitLab git repository management
### END INIT INFO

APP_ROOT="/home/gitlab/gitlab"
DAEMON_OPTS="-c $APP_ROOT/config/unicorn.rb -E production -D"
NAME="unicorn"
DESC="Gitlab service"
UNICORN_PID="unicorn.pid"
UNICORN_PID_PATH="$APP_ROOT/tmp/pids/$UNICORN_PID"
RESQUE_PID="$APP_ROOT/tmp/pids/resque_worker.pid"

check_pid(){
  if [ -f $UNICORN_PID_PATH ]; then
    PID=`cat $UNICORN_PID_PATH`
    STATUS=`ps aux | grep $PID | grep -v grep | wc -l`
  else
    STATUS=0
    PID=0
  fi
}

start() {
    cd $APP_ROOT
    echo "$DESC START" >> $APP_ROOT/log/processes.log
    check_pid
    if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
        ## Program is running, exit with error.
        echo "Error! $DESC $NAME is currently running!" 1>&2
        echo "Program is running, exit with error." >> $APP_ROOT/log/processes.log
        exit 1
    else
        if [ `whoami` = root ]; then
          sudo -u gitlab sh -l -c "bundle exec unicorn_rails $DAEMON_OPTS &"
          sudo -u gitlab sh -l -c "$APP_ROOT/resque.sh &"
          sleep 20 # Reason for sleep explained in: https://github.com/dosire/gitlab-recipes/issues/6#issuecomment-9527678
        else
          bundle exec unicorn_rails $DAEMON_OPTS && $APP_ROOT/resque.sh
        fi
        echo "$DESC started"
    fi
    echo "$DESC started." >> $APP_ROOT/log/processes.log
}

stop() {
    cd $APP_ROOT
    check_pid
    if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
      echo "$(ps aux | grep gitlab | grep unicorn_rails | grep -v grep)" >> $APP_ROOT/log/processes.log
      ## Program is running, stop it.
      kill -QUIT `cat $UNICORN_PID_PATH`
      kill -QUIT `cat $RESQUE_PID`
      rm "$UNICORN_PID_PATH" >> /dev/null
      rm "$RESQUE_PID" >> /dev/null
      echo "$DESC stopped"
    else
      echo "$(ps aux | grep gitlab | grep unicorn_rails | grep -v grep)" >> $APP_ROOT/log/processes.log
      ## Program is not running, exit with error.
      echo "Error! $DESC not started!" 1>&2
      exit 1
    fi
}

status() {
    cd $APP_ROOT
    echo "$DESC status" >> $APP_ROOT/log/processes.log
    echo "$(ps aux | grep gitlab | grep unicorn_rails | grep -v grep)" >> $APP_ROOT/log/processes.log
    check_pid
    if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
      echo "$DESC with PID $PID is running."
      exit 0
    else
      echo "$DESC is not running."
      exit 1
    fi
}

## Check to see if we are running as root first.
## Found at http://www.cyberciti.biz/tips/shell-root-user-check-script.html
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

case "$1" in
    start)
        start
        exit 0
    ;;
    stop)
        stop
        exit 0
    ;;
    reload|restart|force-reload)
        stop
        sleep 5
        start
        exit 0
    ;;
    status)
        status
        exit 0
    ;;
    **)
        echo "Usage: $0 {start|stop|reload}" 1>&2
        exit 1
    ;;
esac